package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DemandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandAllPropertiesEquals(Demand expected, Demand actual) {
        assertDemandAutoGeneratedPropertiesEquals(expected, actual);
        assertDemandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandAllUpdatablePropertiesEquals(Demand expected, Demand actual) {
        assertDemandUpdatableFieldsEquals(expected, actual);
        assertDemandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandAutoGeneratedPropertiesEquals(Demand expected, Demand actual) {
        assertThat(actual)
            .as("Verify Demand auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandUpdatableFieldsEquals(Demand expected, Demand actual) {
        assertThat(actual)
            .as("Verify Demand relevant properties")
            .satisfies(a -> assertThat(a.getDemandDate()).as("check demandDate").isEqualTo(expected.getDemandDate()))
            .satisfies(a -> assertThat(a.getDemandValue()).as("check demandValue").isEqualTo(expected.getDemandValue()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandUpdatableRelationshipsEquals(Demand expected, Demand actual) {
        assertThat(actual)
            .as("Verify Demand relationships")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
