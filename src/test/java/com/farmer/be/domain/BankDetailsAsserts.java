package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAllPropertiesEquals(BankDetails expected, BankDetails actual) {
        assertBankDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertBankDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAllUpdatablePropertiesEquals(BankDetails expected, BankDetails actual) {
        assertBankDetailsUpdatableFieldsEquals(expected, actual);
        assertBankDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAutoGeneratedPropertiesEquals(BankDetails expected, BankDetails actual) {
        assertThat(actual)
            .as("Verify BankDetails auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsUpdatableFieldsEquals(BankDetails expected, BankDetails actual) {
        assertThat(actual)
            .as("Verify BankDetails relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAccountNumber()).as("check accountNumber").isEqualTo(expected.getAccountNumber()))
            .satisfies(a -> assertThat(a.getIfsC()).as("check ifsC").isEqualTo(expected.getIfsC()))
            .satisfies(a -> assertThat(a.getBankName()).as("check bankName").isEqualTo(expected.getBankName()))
            .satisfies(a -> assertThat(a.getBranchName()).as("check branchName").isEqualTo(expected.getBranchName()))
            .satisfies(a -> assertThat(a.getIsVerified()).as("check isVerified").isEqualTo(expected.getIsVerified()))
            .satisfies(a -> assertThat(a.getVerificationTime()).as("check verificationTime").isEqualTo(expected.getVerificationTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsUpdatableRelationshipsEquals(BankDetails expected, BankDetails actual) {
        assertThat(actual)
            .as("Verify BankDetails relationships")
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()));
    }
}
