package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BuyerTargetAchivementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerTargetAchivementAllPropertiesEquals(BuyerTargetAchivement expected, BuyerTargetAchivement actual) {
        assertBuyerTargetAchivementAutoGeneratedPropertiesEquals(expected, actual);
        assertBuyerTargetAchivementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerTargetAchivementAllUpdatablePropertiesEquals(
        BuyerTargetAchivement expected,
        BuyerTargetAchivement actual
    ) {
        assertBuyerTargetAchivementUpdatableFieldsEquals(expected, actual);
        assertBuyerTargetAchivementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerTargetAchivementAutoGeneratedPropertiesEquals(
        BuyerTargetAchivement expected,
        BuyerTargetAchivement actual
    ) {
        assertThat(actual)
            .as("Verify BuyerTargetAchivement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerTargetAchivementUpdatableFieldsEquals(BuyerTargetAchivement expected, BuyerTargetAchivement actual) {
        assertThat(actual)
            .as("Verify BuyerTargetAchivement relevant properties")
            .satisfies(a -> assertThat(a.getLabour()).as("check labour").isEqualTo(expected.getLabour()))
            .satisfies(a -> assertThat(a.getFarmVisit()).as("check farmVisit").isEqualTo(expected.getFarmVisit()))
            .satisfies(a -> assertThat(a.getTotalCollection()).as("check totalCollection").isEqualTo(expected.getTotalCollection()))
            .satisfies(a -> assertThat(a.getTargetDate()).as("check targetDate").isEqualTo(expected.getTargetDate()))
            .satisfies(a -> assertThat(a.getAttendenceHours()).as("check attendenceHours").isEqualTo(expected.getAttendenceHours()))
            .satisfies(a -> assertThat(a.getAchivementLabour()).as("check achivementLabour").isEqualTo(expected.getAchivementLabour()))
            .satisfies(a ->
                assertThat(a.getAchivementFarmVisit()).as("check achivementFarmVisit").isEqualTo(expected.getAchivementFarmVisit())
            )
            .satisfies(a ->
                assertThat(a.getAchivementTotalCollection())
                    .as("check achivementTotalCollection")
                    .isEqualTo(expected.getAchivementTotalCollection())
            )
            .satisfies(a ->
                assertThat(a.getAchivementAttendenceHours())
                    .as("check achivementAttendenceHours")
                    .isEqualTo(expected.getAchivementAttendenceHours())
            )
            .satisfies(a -> assertThat(a.getAchivementScore()).as("check achivementScore").isEqualTo(expected.getAchivementScore()))
            .satisfies(a -> assertThat(a.getIncentive()).as("check incentive").isEqualTo(expected.getIncentive()))
            .satisfies(a -> assertThat(a.getKmDriven()).as("check kmDriven").isEqualTo(expected.getKmDriven()))
            .satisfies(a -> assertThat(a.getConveyance()).as("check conveyance").isEqualTo(expected.getConveyance()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerTargetAchivementUpdatableRelationshipsEquals(
        BuyerTargetAchivement expected,
        BuyerTargetAchivement actual
    ) {
        assertThat(actual)
            .as("Verify BuyerTargetAchivement relationships")
            .satisfies(a -> assertThat(a.getBuyer()).as("check buyer").isEqualTo(expected.getBuyer()));
    }
}
