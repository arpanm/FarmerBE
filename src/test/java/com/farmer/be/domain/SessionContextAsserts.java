package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SessionContextAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSessionContextAllPropertiesEquals(SessionContext expected, SessionContext actual) {
        assertSessionContextAutoGeneratedPropertiesEquals(expected, actual);
        assertSessionContextAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSessionContextAllUpdatablePropertiesEquals(SessionContext expected, SessionContext actual) {
        assertSessionContextUpdatableFieldsEquals(expected, actual);
        assertSessionContextUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSessionContextAutoGeneratedPropertiesEquals(SessionContext expected, SessionContext actual) {
        assertThat(actual)
            .as("Verify SessionContext auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSessionContextUpdatableFieldsEquals(SessionContext expected, SessionContext actual) {
        assertThat(actual)
            .as("Verify SessionContext relevant properties")
            .satisfies(a -> assertThat(a.getSessionId()).as("check sessionId").isEqualTo(expected.getSessionId()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getIsLoggedIn()).as("check isLoggedIn").isEqualTo(expected.getIsLoggedIn()))
            .satisfies(a -> assertThat(a.getFarmerId()).as("check farmerId").isEqualTo(expected.getFarmerId()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSessionContextUpdatableRelationshipsEquals(SessionContext expected, SessionContext actual) {
        // empty method
    }
}
