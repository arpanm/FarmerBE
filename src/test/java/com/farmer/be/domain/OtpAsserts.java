package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OtpAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpAllPropertiesEquals(Otp expected, Otp actual) {
        assertOtpAutoGeneratedPropertiesEquals(expected, actual);
        assertOtpAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpAllUpdatablePropertiesEquals(Otp expected, Otp actual) {
        assertOtpUpdatableFieldsEquals(expected, actual);
        assertOtpUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpAutoGeneratedPropertiesEquals(Otp expected, Otp actual) {
        assertThat(actual)
            .as("Verify Otp auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpUpdatableFieldsEquals(Otp expected, Otp actual) {
        assertThat(actual)
            .as("Verify Otp relevant properties")
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getEmailOtp()).as("check emailOtp").isEqualTo(expected.getEmailOtp()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getPhoneOtp()).as("check phoneOtp").isEqualTo(expected.getPhoneOtp()))
            .satisfies(a -> assertThat(a.getIsValidated()).as("check isValidated").isEqualTo(expected.getIsValidated()))
            .satisfies(a -> assertThat(a.getExpiryTime()).as("check expiryTime").isEqualTo(expected.getExpiryTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpUpdatableRelationshipsEquals(Otp expected, Otp actual) {
        assertThat(actual)
            .as("Verify Otp relationships")
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()));
    }
}
