package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PickUpConfirmationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickUpConfirmationAllPropertiesEquals(PickUpConfirmation expected, PickUpConfirmation actual) {
        assertPickUpConfirmationAutoGeneratedPropertiesEquals(expected, actual);
        assertPickUpConfirmationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickUpConfirmationAllUpdatablePropertiesEquals(PickUpConfirmation expected, PickUpConfirmation actual) {
        assertPickUpConfirmationUpdatableFieldsEquals(expected, actual);
        assertPickUpConfirmationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickUpConfirmationAutoGeneratedPropertiesEquals(PickUpConfirmation expected, PickUpConfirmation actual) {
        assertThat(actual)
            .as("Verify PickUpConfirmation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickUpConfirmationUpdatableFieldsEquals(PickUpConfirmation expected, PickUpConfirmation actual) {
        assertThat(actual)
            .as("Verify PickUpConfirmation relevant properties")
            .satisfies(a -> assertThat(a.getConfirmDate()).as("check confirmDate").isEqualTo(expected.getConfirmDate()))
            .satisfies(a -> assertThat(a.getConfirmValue()).as("check confirmValue").isEqualTo(expected.getConfirmValue()))
            .satisfies(a -> assertThat(a.getPickupBy()).as("check pickupBy").isEqualTo(expected.getPickupBy()))
            .satisfies(a -> assertThat(a.getPickupTime()).as("check pickupTime").isEqualTo(expected.getPickupTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickUpConfirmationUpdatableRelationshipsEquals(PickUpConfirmation expected, PickUpConfirmation actual) {
        assertThat(actual)
            .as("Verify PickUpConfirmation relationships")
            .satisfies(a -> assertThat(a.getGrade()).as("check grade").isEqualTo(expected.getGrade()))
            .satisfies(a -> assertThat(a.getFarm()).as("check farm").isEqualTo(expected.getFarm()))
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
