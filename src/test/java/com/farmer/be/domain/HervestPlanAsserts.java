package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HervestPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHervestPlanAllPropertiesEquals(HervestPlan expected, HervestPlan actual) {
        assertHervestPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertHervestPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHervestPlanAllUpdatablePropertiesEquals(HervestPlan expected, HervestPlan actual) {
        assertHervestPlanUpdatableFieldsEquals(expected, actual);
        assertHervestPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHervestPlanAutoGeneratedPropertiesEquals(HervestPlan expected, HervestPlan actual) {
        assertThat(actual)
            .as("Verify HervestPlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHervestPlanUpdatableFieldsEquals(HervestPlan expected, HervestPlan actual) {
        assertThat(actual)
            .as("Verify HervestPlan relevant properties")
            .satisfies(a -> assertThat(a.getHervestPlanDate()).as("check hervestPlanDate").isEqualTo(expected.getHervestPlanDate()))
            .satisfies(a -> assertThat(a.getHervestPlanValue()).as("check hervestPlanValue").isEqualTo(expected.getHervestPlanValue()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHervestPlanUpdatableRelationshipsEquals(HervestPlan expected, HervestPlan actual) {
        assertThat(actual)
            .as("Verify HervestPlan relationships")
            .satisfies(a -> assertThat(a.getFarm()).as("check farm").isEqualTo(expected.getFarm()))
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
