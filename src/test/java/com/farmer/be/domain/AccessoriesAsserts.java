package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccessoriesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccessoriesAllPropertiesEquals(Accessories expected, Accessories actual) {
        assertAccessoriesAutoGeneratedPropertiesEquals(expected, actual);
        assertAccessoriesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccessoriesAllUpdatablePropertiesEquals(Accessories expected, Accessories actual) {
        assertAccessoriesUpdatableFieldsEquals(expected, actual);
        assertAccessoriesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccessoriesAutoGeneratedPropertiesEquals(Accessories expected, Accessories actual) {
        assertThat(actual)
            .as("Verify Accessories auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccessoriesUpdatableFieldsEquals(Accessories expected, Accessories actual) {
        assertThat(actual)
            .as("Verify Accessories relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getImagePath()).as("check imagePath").isEqualTo(expected.getImagePath()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getOrderNo()).as("check orderNo").isEqualTo(expected.getOrderNo()))
            .satisfies(a -> assertThat(a.getSkuId()).as("check skuId").isEqualTo(expected.getSkuId()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccessoriesUpdatableRelationshipsEquals(Accessories expected, Accessories actual) {
        assertThat(actual)
            .as("Verify Accessories relationships")
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getFarms()).as("check farms").isEqualTo(expected.getFarms()));
    }
}
