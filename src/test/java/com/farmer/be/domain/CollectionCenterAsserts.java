package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CollectionCenterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionCenterAllPropertiesEquals(CollectionCenter expected, CollectionCenter actual) {
        assertCollectionCenterAutoGeneratedPropertiesEquals(expected, actual);
        assertCollectionCenterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionCenterAllUpdatablePropertiesEquals(CollectionCenter expected, CollectionCenter actual) {
        assertCollectionCenterUpdatableFieldsEquals(expected, actual);
        assertCollectionCenterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionCenterAutoGeneratedPropertiesEquals(CollectionCenter expected, CollectionCenter actual) {
        assertThat(actual)
            .as("Verify CollectionCenter auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionCenterUpdatableFieldsEquals(CollectionCenter expected, CollectionCenter actual) {
        assertThat(actual)
            .as("Verify CollectionCenter relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getCcId()).as("check ccId").isEqualTo(expected.getCcId()))
            .satisfies(a -> assertThat(a.getFfdcCode()).as("check ffdcCode").isEqualTo(expected.getFfdcCode()))
            .satisfies(a -> assertThat(a.getFfdcName()).as("check ffdcName").isEqualTo(expected.getFfdcName()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionCenterUpdatableRelationshipsEquals(CollectionCenter expected, CollectionCenter actual) {
        assertThat(actual)
            .as("Verify CollectionCenter relationships")
            .satisfies(a -> assertThat(a.getCrops()).as("check crops").isEqualTo(expected.getCrops()));
    }
}
