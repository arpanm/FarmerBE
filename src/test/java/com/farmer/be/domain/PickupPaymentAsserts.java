package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PickupPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickupPaymentAllPropertiesEquals(PickupPayment expected, PickupPayment actual) {
        assertPickupPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertPickupPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickupPaymentAllUpdatablePropertiesEquals(PickupPayment expected, PickupPayment actual) {
        assertPickupPaymentUpdatableFieldsEquals(expected, actual);
        assertPickupPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickupPaymentAutoGeneratedPropertiesEquals(PickupPayment expected, PickupPayment actual) {
        assertThat(actual)
            .as("Verify PickupPayment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickupPaymentUpdatableFieldsEquals(PickupPayment expected, PickupPayment actual) {
        assertThat(actual)
            .as("Verify PickupPayment relevant properties")
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getPaymentDate()).as("check paymentDate").isEqualTo(expected.getPaymentDate()))
            .satisfies(a -> assertThat(a.getDetails()).as("check details").isEqualTo(expected.getDetails()))
            .satisfies(a -> assertThat(a.getPaymentUpdatedBy()).as("check paymentUpdatedBy").isEqualTo(expected.getPaymentUpdatedBy()))
            .satisfies(a -> assertThat(a.getPaymentUpdatedTime()).as("check paymentUpdatedTime").isEqualTo(expected.getPaymentUpdatedTime())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPickupPaymentUpdatableRelationshipsEquals(PickupPayment expected, PickupPayment actual) {
        // empty method
    }
}
