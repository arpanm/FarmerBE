package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DemandDataFileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataFileAllPropertiesEquals(DemandDataFile expected, DemandDataFile actual) {
        assertDemandDataFileAutoGeneratedPropertiesEquals(expected, actual);
        assertDemandDataFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataFileAllUpdatablePropertiesEquals(DemandDataFile expected, DemandDataFile actual) {
        assertDemandDataFileUpdatableFieldsEquals(expected, actual);
        assertDemandDataFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataFileAutoGeneratedPropertiesEquals(DemandDataFile expected, DemandDataFile actual) {
        assertThat(actual)
            .as("Verify DemandDataFile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataFileUpdatableFieldsEquals(DemandDataFile expected, DemandDataFile actual) {
        assertThat(actual)
            .as("Verify DemandDataFile relevant properties")
            .satisfies(a -> assertThat(a.getUploadedDate()).as("check uploadedDate").isEqualTo(expected.getUploadedDate()))
            .satisfies(a -> assertThat(a.getUploadedTime()).as("check uploadedTime").isEqualTo(expected.getUploadedTime()))
            .satisfies(a -> assertThat(a.getFileName()).as("check fileName").isEqualTo(expected.getFileName()))
            .satisfies(a -> assertThat(a.getUploadedBy()).as("check uploadedBy").isEqualTo(expected.getUploadedBy()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataFileUpdatableRelationshipsEquals(DemandDataFile expected, DemandDataFile actual) {
        // empty method
    }
}
