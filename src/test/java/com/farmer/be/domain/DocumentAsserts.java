package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAllPropertiesEquals(Document expected, Document actual) {
        assertDocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAllUpdatablePropertiesEquals(Document expected, Document actual) {
        assertDocumentUpdatableFieldsEquals(expected, actual);
        assertDocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAutoGeneratedPropertiesEquals(Document expected, Document actual) {
        assertThat(actual)
            .as("Verify Document auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentUpdatableFieldsEquals(Document expected, Document actual) {
        assertThat(actual)
            .as("Verify Document relevant properties")
            .satisfies(a -> assertThat(a.getDocPath()).as("check docPath").isEqualTo(expected.getDocPath()))
            .satisfies(a -> assertThat(a.getDocType()).as("check docType").isEqualTo(expected.getDocType()))
            .satisfies(a -> assertThat(a.getDocFormat()).as("check docFormat").isEqualTo(expected.getDocFormat()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentUpdatableRelationshipsEquals(Document expected, Document actual) {
        assertThat(actual)
            .as("Verify Document relationships")
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()))
            .satisfies(a -> assertThat(a.getFarm()).as("check farm").isEqualTo(expected.getFarm()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getPanDetails()).as("check panDetails").isEqualTo(expected.getPanDetails()))
            .satisfies(a -> assertThat(a.getBankDetails()).as("check bankDetails").isEqualTo(expected.getBankDetails()))
            .satisfies(a -> assertThat(a.getFieldVisit()).as("check fieldVisit").isEqualTo(expected.getFieldVisit()));
    }
}
