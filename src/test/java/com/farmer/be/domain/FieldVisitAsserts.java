package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FieldVisitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldVisitAllPropertiesEquals(FieldVisit expected, FieldVisit actual) {
        assertFieldVisitAutoGeneratedPropertiesEquals(expected, actual);
        assertFieldVisitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldVisitAllUpdatablePropertiesEquals(FieldVisit expected, FieldVisit actual) {
        assertFieldVisitUpdatableFieldsEquals(expected, actual);
        assertFieldVisitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldVisitAutoGeneratedPropertiesEquals(FieldVisit expected, FieldVisit actual) {
        assertThat(actual)
            .as("Verify FieldVisit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldVisitUpdatableFieldsEquals(FieldVisit expected, FieldVisit actual) {
        assertThat(actual)
            .as("Verify FieldVisit relevant properties")
            .satisfies(a -> assertThat(a.getFieldVisitDate()).as("check fieldVisitDate").isEqualTo(expected.getFieldVisitDate()))
            .satisfies(a -> assertThat(a.getFieldVisitTime()).as("check fieldVisitTime").isEqualTo(expected.getFieldVisitTime()))
            .satisfies(a -> assertThat(a.getLat()).as("check lat").isEqualTo(expected.getLat()))
            .satisfies(a -> assertThat(a.getLon()).as("check lon").isEqualTo(expected.getLon()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldVisitUpdatableRelationshipsEquals(FieldVisit expected, FieldVisit actual) {
        assertThat(actual)
            .as("Verify FieldVisit relationships")
            .satisfies(a -> assertThat(a.getBuyer()).as("check buyer").isEqualTo(expected.getBuyer()))
            .satisfies(a -> assertThat(a.getFarm()).as("check farm").isEqualTo(expected.getFarm()));
    }
}
