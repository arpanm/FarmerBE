package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BannerContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBannerContentAllPropertiesEquals(BannerContent expected, BannerContent actual) {
        assertBannerContentAutoGeneratedPropertiesEquals(expected, actual);
        assertBannerContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBannerContentAllUpdatablePropertiesEquals(BannerContent expected, BannerContent actual) {
        assertBannerContentUpdatableFieldsEquals(expected, actual);
        assertBannerContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBannerContentAutoGeneratedPropertiesEquals(BannerContent expected, BannerContent actual) {
        assertThat(actual)
            .as("Verify BannerContent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBannerContentUpdatableFieldsEquals(BannerContent expected, BannerContent actual) {
        assertThat(actual)
            .as("Verify BannerContent relevant properties")
            .satisfies(a -> assertThat(a.getBannerTag()).as("check bannerTag").isEqualTo(expected.getBannerTag()))
            .satisfies(a -> assertThat(a.getLogoPath()).as("check logoPath").isEqualTo(expected.getLogoPath()))
            .satisfies(a -> assertThat(a.getImagePath()).as("check imagePath").isEqualTo(expected.getImagePath()))
            .satisfies(a -> assertThat(a.getHeading()).as("check heading").isEqualTo(expected.getHeading()))
            .satisfies(a -> assertThat(a.getSubHeading()).as("check subHeading").isEqualTo(expected.getSubHeading()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getLandingLink()).as("check landingLink").isEqualTo(expected.getLandingLink()))
            .satisfies(a -> assertThat(a.getLandingUtm()).as("check landingUtm").isEqualTo(expected.getLandingUtm()))
            .satisfies(a -> assertThat(a.getPixelLink()).as("check pixelLink").isEqualTo(expected.getPixelLink()))
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBannerContentUpdatableRelationshipsEquals(BannerContent expected, BannerContent actual) {
        assertThat(actual)
            .as("Verify BannerContent relationships")
            .satisfies(a -> assertThat(a.getHoldingCarousel()).as("check holdingCarousel").isEqualTo(expected.getHoldingCarousel()));
    }
}
