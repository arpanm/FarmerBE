package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PriceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceAllPropertiesEquals(Price expected, Price actual) {
        assertPriceAutoGeneratedPropertiesEquals(expected, actual);
        assertPriceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceAllUpdatablePropertiesEquals(Price expected, Price actual) {
        assertPriceUpdatableFieldsEquals(expected, actual);
        assertPriceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceAutoGeneratedPropertiesEquals(Price expected, Price actual) {
        assertThat(actual)
            .as("Verify Price auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceUpdatableFieldsEquals(Price expected, Price actual) {
        assertThat(actual)
            .as("Verify Price relevant properties")
            .satisfies(a -> assertThat(a.getPriceDate()).as("check priceDate").isEqualTo(expected.getPriceDate()))
            .satisfies(a -> assertThat(a.getPriceValue()).as("check priceValue").isEqualTo(expected.getPriceValue()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceUpdatableRelationshipsEquals(Price expected, Price actual) {
        assertThat(actual)
            .as("Verify Price relationships")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
