package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PanDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPanDetailsAllPropertiesEquals(PanDetails expected, PanDetails actual) {
        assertPanDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertPanDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPanDetailsAllUpdatablePropertiesEquals(PanDetails expected, PanDetails actual) {
        assertPanDetailsUpdatableFieldsEquals(expected, actual);
        assertPanDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPanDetailsAutoGeneratedPropertiesEquals(PanDetails expected, PanDetails actual) {
        assertThat(actual)
            .as("Verify PanDetails auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPanDetailsUpdatableFieldsEquals(PanDetails expected, PanDetails actual) {
        assertThat(actual)
            .as("Verify PanDetails relevant properties")
            .satisfies(a -> assertThat(a.getPan()).as("check pan").isEqualTo(expected.getPan()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDateOfBirth()).as("check dateOfBirth").isEqualTo(expected.getDateOfBirth()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getIsVerified()).as("check isVerified").isEqualTo(expected.getIsVerified()))
            .satisfies(a -> assertThat(a.getVerificationTime()).as("check verificationTime").isEqualTo(expected.getVerificationTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPanDetailsUpdatableRelationshipsEquals(PanDetails expected, PanDetails actual) {
        assertThat(actual)
            .as("Verify PanDetails relationships")
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()));
    }
}
