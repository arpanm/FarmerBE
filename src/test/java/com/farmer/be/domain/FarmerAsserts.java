package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FarmerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerAllPropertiesEquals(Farmer expected, Farmer actual) {
        assertFarmerAutoGeneratedPropertiesEquals(expected, actual);
        assertFarmerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerAllUpdatablePropertiesEquals(Farmer expected, Farmer actual) {
        assertFarmerUpdatableFieldsEquals(expected, actual);
        assertFarmerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerAutoGeneratedPropertiesEquals(Farmer expected, Farmer actual) {
        assertThat(actual)
            .as("Verify Farmer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerUpdatableFieldsEquals(Farmer expected, Farmer actual) {
        assertThat(actual)
            .as("Verify Farmer relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getIsWhatsAppEnabled()).as("check isWhatsAppEnabled").isEqualTo(expected.getIsWhatsAppEnabled()))
            .satisfies(a -> assertThat(a.getFarmerType()).as("check farmerType").isEqualTo(expected.getFarmerType()))
            .satisfies(a -> assertThat(a.getPreferedLanguage()).as("check preferedLanguage").isEqualTo(expected.getPreferedLanguage()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerUpdatableRelationshipsEquals(Farmer expected, Farmer actual) {
        // empty method
    }
}
