package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DemandDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataAllPropertiesEquals(DemandData expected, DemandData actual) {
        assertDemandDataAutoGeneratedPropertiesEquals(expected, actual);
        assertDemandDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataAllUpdatablePropertiesEquals(DemandData expected, DemandData actual) {
        assertDemandDataUpdatableFieldsEquals(expected, actual);
        assertDemandDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataAutoGeneratedPropertiesEquals(DemandData expected, DemandData actual) {
        assertThat(actual)
            .as("Verify DemandData auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataUpdatableFieldsEquals(DemandData expected, DemandData actual) {
        assertThat(actual)
            .as("Verify DemandData relevant properties")
            .satisfies(a -> assertThat(a.getFromCPC()).as("check fromCPC").isEqualTo(expected.getFromCPC()))
            .satisfies(a -> assertThat(a.getToCC()).as("check toCC").isEqualTo(expected.getToCC()))
            .satisfies(a -> assertThat(a.getpCode()).as("check pCode").isEqualTo(expected.getpCode()))
            .satisfies(a -> assertThat(a.getArticle()).as("check article").isEqualTo(expected.getArticle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getUom()).as("check uom").isEqualTo(expected.getUom()))
            .satisfies(a -> assertThat(a.getNetWeightGrams()).as("check netWeightGrams").isEqualTo(expected.getNetWeightGrams()))
            .satisfies(a -> assertThat(a.getCrateSize()).as("check crateSize").isEqualTo(expected.getCrateSize()))
            .satisfies(a -> assertThat(a.getIndentUom()).as("check indentUom").isEqualTo(expected.getIndentUom()))
            .satisfies(a -> assertThat(a.getIndentKg()).as("check indentKg").isEqualTo(expected.getIndentKg()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandDataUpdatableRelationshipsEquals(DemandData expected, DemandData actual) {
        assertThat(actual)
            .as("Verify DemandData relationships")
            .satisfies(a -> assertThat(a.getFile()).as("check file").isEqualTo(expected.getFile()))
            .satisfies(a -> assertThat(a.getCollectionCenter()).as("check collectionCenter").isEqualTo(expected.getCollectionCenter()));
    }
}
