entity SessionContext {
	sessionId String,
    language Language,
    isLoggedIn Boolean,
    farmerId String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum Language {
	English,
    Hindi,
    Bengali,
    Marathi,
    Tamil,
    Telegu,
    Kanada,
    Malyalam,
    Panjabi,
    Kashmiri
}

entity BannerContent {
	bannerTag String required,
    logoPath String,
    imagePath String,
    heading String,
    subHeading String,
    description String,
    landingLink String,
    landingUtm String,
    pixelLink String,
    startTime Instant,
    endTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

entity CarouselContent {
	carouselTag String required,
    showViewMore Boolean,
    viewMoreLink String,
    viewMoreUtm String,
    pixelLink String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	CarouselContent{banners} to BannerContent{holdingCarousel}
}

entity Farmer {
	name String,
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    phone Long required min (1000000000) max(9999999999),
    isWhatsAppEnabled Boolean,
    farmerType FarmerType,
    preferedLanguage Language,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum FarmerType {
	Farmer,
    Trader,
    FPO,
    Other
}

entity Farm {
	farmType FarmType,
    ownerName String,
  	relationshipWithOwner String,
    areaInAcres Float,
    farmDocumentNo String
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum FarmType {
	Own,
    Family,
    Leased,
    Other
}

relationship OneToMany {
	Farmer to Farm{farmer}
}

entity Address {
	line1 String required,
    line2 String,
    landmark String,
    city String,
    state String required,
    country String required,
	pincode Long required,
	lat Long,
    lon Long,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farmer to Address{farmer}
}

relationship OneToMany {
	Farm to Address{farm}
}

entity PanDetails {
	pan String required,
    name String,
    dateOfBirth LocalDate,
    gender Gender,
    country String,
	isVerified Boolean,
    verificationTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum Gender {
	Male,
    Female,
    Other
}

relationship OneToMany {
	Farmer to PanDetails{farmer}
}


entity BankDetails {
	name String,
    accountNumber String,
    ifsC String,
    bankName String,
    branchName String,
    isVerified Boolean,
    verificationTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farmer to BankDetails{farmer}
}

entity TermsAndCondition {
	termsLink String,
    aggreedOn Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farmer to TermsAndCondition{farmer}
}

entity Document {
	docPath String,
    docType DocumentType,
    docFormat DocumentFormat,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum DocumentType {
	AddressProof,
    RelationshipProof,
    FarmDocument,
    IdProof,
    ProfileImage,
    CanceledCheque,
    BankStatement,
    Other
}

enum DocumentFormat {
	Pdf,
    Image,
    Other
}

relationship OneToMany {
	Farmer to Document{farmer}
}

relationship OneToMany {
	Farm to Document{farm}
}

relationship OneToMany {
	Address to Document{address}
}

relationship OneToMany {
	PanDetails to Document{panDetails}
}

relationship OneToMany {
	BankDetails to Document{bankDetails}
}

entity Otp {
	email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
	emailOtp Integer,
    phone Long,
    phoneOtp Integer,
    isValidated Boolean,
    expiryTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farmer to Otp{farmer}
}

entity Category {
	name String,
    imagePath String,
    description String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Category to Category{parent}
}

entity Crop {
	name String,
    imagePath String,
    description String,
    orderNo Long,
    skuId String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Category to Crop{category}
}

relationship ManyToMany {
	Farm to Crop
}

entity Accessories {
	name String,
    imagePath String,
    description String,
    orderNo Long,
    skuId String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Category to Accessories{category}
}

relationship ManyToMany {
	Farm to Accessories
}


entity Demand {
	demandDate LocalDate,
    demandValue Float,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Crop to Demand{crop}
}


entity Price {
	priceDate LocalDate,
    priceValue Float,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Crop to Price{crop}
}

entity HervestPlanRule {
	frequencyType FrequencyType,
    hervestPlanValue Float,
    hervestPlanValueMin Float,
    hervestPlanValueMax Float,
    daysOfWeek String,
    daysOfMonth String,
    daysOfYear String,
    alternateXdays Long,
    startDate LocalDate,
    hasEndDate Boolean,
    endDate LocalDate,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farm to HervestPlanRule{farm}
}

relationship OneToMany {
	Crop to HervestPlanRule{crop}
}

enum FrequencyType {
	DaysOfWeek,
    DaysOfMonth,
    DaysOfYear,
    EveryDay,
    AlternateDate,
    AlternateXDays,
    Other
}

entity HervestPlan {
	hervestPlanDate LocalDate,
    hervestPlanValue Float,
    hervestPlanValueMin Float,
    hervestPlanValueMax Float,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farm to HervestPlan{farm}
}

relationship OneToMany {
	Crop to HervestPlan{crop}
}

entity SupplyConfirmation {
	confirmDate LocalDate,
    confirmValue Float,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farm to SupplyConfirmation{farm}
}

relationship OneToMany {
	Crop to SupplyConfirmation{crop}
}

entity PickUpConfirmation {
	confirmDate LocalDate,
    confirmValue Float,
    pickupBy String,
    pickupTime String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	Farm to PickUpConfirmation{farm}
}

relationship OneToMany {
	Crop to PickUpConfirmation{crop}
}

entity PickupGradation {
	itemGrade ItemGrade,
    gradedBy String,
    gradedTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum ItemGrade {
	GoodQuality,
    ModerateQuality,
    BadQuality,
    RejectQuality,
    Other
}

relationship OneToOne {
	PickUpConfirmation{grade} to PickupGradation{pickupItem}
}


entity PickupPayment {
	paymentStatus PaymentStatus,
    transactionId String,
    paymentDate LocalDate,
    details String,
    paymentUpdatedBy String,
    paymentUpdatedTime Instant,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum PaymentStatus {
	Pending,
    Initiated,
    Paid,
    Confirmed,
    Other
}

relationship ManyToOne {
	PickUpConfirmation{itemPayment} to PickupPayment{pickupItems}
}


entity CollectionCenter {
	name String,
    ccId String,
    ffdcCode String,
    ffdcName String,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

relationship OneToMany {
	CollectionCenter to Address{collectionCenter}
}

entity LocationMapping {
	areaName String,
    areaType AreaType,
    pincode Long,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum AreaType {
	Pincode,
    Village,
    City,
    District,
    State,
    Country,
    Other
}

relationship OneToMany {
	CollectionCenter to LocationMapping{collectionCenter}
}

relationship ManyToMany {
	CollectionCenter to Crop
}

entity DemandData {
	fromCPC String,
    toCC String,
    pCode String,
    article String,
    description String,
    uom String,
    netWeightGrams Float,
    crateSize Float,
    indentUom Float,
    indentKg Float,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

entity DemandDataFile {
	uploadedDate LocalDate,
    fileName String,
    uploadedBy String,
    status UploadStatus,
    isActive Boolean,
    createddBy String required,
    createdTime Instant required,
    updatedBy String required,
    updatedTime Instant required
}

enum UploadStatus {
	Init,
    Success,
    ErrorInUpload
    Processed,
    ErrorInProcess,
    Other
}

relationship OneToMany {
	DemandDataFile to DemandData{file}
}

relationship OneToOne {
	DemandData{crop} to Crop{demandData}
}

relationship OneToOne {
	DemandData{collectionCenter} to CollectionCenter{demandData}
}

relationship ManyToOne {
	Farm{collectionCenter} to CollectionCenter
}

application {
  config {
    baseName FarmerBE
    applicationType monolith
    serverPort 9001
    devDatabaseType h2Disk
    prodDatabaseType mysql
    clientFramework react
    clientPackageManager npm
    authenticationType jwt
    buildTool maven
    enableSwaggerCodegen true
    enableTranslation true
    languages	[bn, hi, en, mr, ta, te]
    nativeLanguage	en
    packageName com.farmer.be
  }
  entities *
  dto * with mapstruct
  paginate * with infinite-scroll
  service all with serviceImpl
}